# -*- coding: utf-8 -*-
"""ToDo_SLR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t4ik0CpkRZdkb3x-eapQXfop5BiExmtd
"""

# Import library 
import pandas as pd 
import numpy as np 
from matplotlib import pyplot as plt

# Import data
df = pd.read_csv('SOCR-HeightWeight.csv')

# Display data
df

# Looking for missing values
df.isna().sum()

# Split data into dependent variable and independent variable
x = df.iloc[:, 1].values
y = df.iloc[:,-1].values

# correlation coefficient
# the correlation coefficient calculates the strength of the linear relationship between X and Y
(np.mean(x*y)-np.mean(x)*np.mean(y))/(np.std(x)*np.std(y))
#correlation coefficient= 0.5 the linear relationship between X and Y is weak

plt.scatter(x, y, color = 'red')
plt.title('Height vs Weight')
plt.xlabel('Height(Inches)')
plt.ylabel('Weight(Pounds)')
plt.show()

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)



# Training the Simple Linear Regression model on the Training set
x_train= x_train.reshape(-1, 1)
x_test = x_test.reshape(-1, 1)
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(x_train, y_train)

# Prediction x test values
y_pred = regressor.predict(x_test)

# Visualising the Training set results
plt.scatter(x_train, y_train, color = 'red')
plt.plot(x_train, regressor.predict(x_train), color = 'blue')
plt.title('Height vs Weight')
plt.xlabel('Height(Inches)')
plt.ylabel('Weight(Pounds)')
plt.show()

# Visualising the Test set results
plt.scatter(x_test, y_test, color = 'red')
plt.plot(x_train, regressor.predict(x_train), color = 'blue')
plt.title('Height vs Weight')
plt.xlabel('Height(Inches)')
plt.ylabel('Weight(Pounds)')
plt.show()

from sklearn.metrics import r2_score
r2_score(y_pred,y_test)